▓█████▄ ▓█████  ▄████▄   ██▓███
▒██▀ ██▌▓█   ▀ ▒██▀ ▀█  ▓██░  ██▒
░██   █▌▒███   ▒▓█    ▄ ▓██░ ██▓▒
░▓█▄   ▌▒▓█  ▄ ▒▓▓▄ ▄██▒▒██▄█▓▒ ▒
░▒████▓ ░▒████▒▒ ▓███▀ ░▒██▒ ░  ░
 ▒▒▓  ▒ ░░ ▒░ ░░ ░▒ ▒  ░▒▓▒░ ░  ░
 ░ ▒  ▒  ░ ░  ░  ░  ▒   ░▒ ░
 ░ ░  ░    ░   ░        ░░
   ░       ░  ░░ ░
 ░             ░

DECP - protocol
--------------------------------------------------------------------
request structure:
    requests are formatted as json with the "request" key equal to the request
    and the rest of the keys are the named parameters of the request

    example:
        {
            "request": "<request>",
            "<param name>": "<value>",
            ...
            "<param name>": "<value>"
        }

requests:
    MSG - message:
        msg requests send messages
        sent to: every node connected to network

        parameters:
            param name "message" -- value base64 encoded
                message encrypted with randomly generated 256 bit AES key in CBC mode
            param name "sender_nick" -- value unencoded
                unique nick of sender
            param name "key" -- value base64 encoded
                AES key encrypted with recipients public, 2048 bit RSA key
            param name "iv" -- value base64 encoded
                AES initilization vector, unencrypted
            param name "signature" -- value base64 encoded
                SHA-224 hash of message encoded with sender's private key

        server response: none

    JOIN - join:
        IMPORTANT: v1.1's join request is completely unencrypted, YOUR PUBLIC KEYS, IPS AND NICKS ARE NOT SECURE IN THIS VERSION
        join requests asks to join a network

        INITIAL REQUEST
        initial request sent to: one person in network

        parameters:
            param name "nick" -- value unencoded
                unique nick of sender
            param name "public_key" -- value unencoded
                public key of sender
            param name "ips" -- value unencoded
                list of sender ips
            param name "get_members" -- value unencoded
                "yes" or "no", if "yes" server response with member list formatted as json

        server response: member list formatted as json if allowed, none if not

        {
            "members": [
                    {
                        "nick": "<nick>",
                        "public_key": "<public key>"
                        "ips": [
                            "<ip>"
                        ]
                    },
                    ...
                    {
                        "nick": "<nick>",
                        "public_key": "<public key>"
                        "ips": [
                            "<ip>"
                        ]
                    }
                ]
        }

        SECONDARY REQUEST
        secondary request sent to everyone in network if initial request receives response
        same request as initial but get_members param set to "no"
        server response: none

server:
    listens on tcp port 3623 for incoming requests
